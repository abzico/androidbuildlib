#!/bin/bash

#
# Build library script for android for specified target of arch
# this is targeted to be used to build library that has autoconf build system
# against ndk r19c
#
# configurable parameters
#   out_path        - target installation path to install generated library files for all archs,
#                     it need to be in relative path from the directory executing this script [default is build]
#   host_tag        - host value that will build the library (hint: you can take a look for this value
#                     at your $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/ [default is linux-x86_64]
#   minsdkversion   - minimum sdk version to support, this is value of api level [default is 18]
#   target_abis     - target abis to build for, separated by space [default is "armeabi-v7a x86 arm64-v8a x86_64"]
#
# By abzi.co (Angry Baozi)
# Twitter: @haxpor or @abzi_co
#

# host that builds
if [ -z $host_tag ]
then
  host_tag=linux-x86_64
fi

# mininum sdk version
# since 18, it has OpenGL ES 3.0 support
# that's why we use that number here
if [ -z $minsdkversion ]
then
  minsdkversion=18
fi

# target abis
# see https://developer.android.com/ndk/guides/abis.html#sa
# the latter two needs api level at least 21 so we need special care for these twos
# you can check its executable file names at $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/$host_tag/bin
# provided that you have set $ANDROID_NDK_HOME and use defined $host_tag above
if [ -z $target_abis ]
then
  target_abis="armeabi-v7a x86 arm64-v8a x86_64"
fi

# output path
if [ -z $out_path ]
then
  out_path=build
fi

# check to create installation dir of built library files
if [ ! -d "$out_path" ]
then
  mkdir "$out_path"

  for dir in $target_abis
  do
    if [ ! -d "$out_path"/"$dir" ]
    then
      mkdir "$out_path"/"$dir"
    fi
  done
fi

export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/$host_tag

for target in $target_abis
do
  if [ $target == "armeabi-v7a" ]
  then
    echo "prepare for armeabi-v7a"
    cc_prefix=armv7a-linux-androideabi$minsdkversion-
    support_prefix=arm-linux-androideabi-
    host=armv7a-linux-androideabi
    install_dir=`pwd`/"$out_path"/armeabi-v7a
    CFLAGS="${CFLAGS} -march=armv7-a -mfpu=neon -mfloat-abi=softfp -mthumb"
  elif [ $target == "x86" ]
  then
    echo "prepare for x86"
    cc_prefix=i686-linux-android18-
    support_prefix=i686-linux-android-
    host=i686-linux-android
    install_dir=`pwd`/"$out_path"/x86
    CFLAGS="${CFLAGS} -march=i686 -mtune=intel -mssse3 -mfpmath=sse -m32"
  elif [ $target == "arm64-v8a" ]
  then
    echo "prepare for arm64-v8a"
    cc_prefix=aarch64-linux-android21-
    support_prefix=aarch64-linux-android-
    host=aarch64-linux-android
    install_dir=`pwd`/"$out_path"/arm64-v8a
  else
    echo "prepare for x86_64"
    cc_prefix=x86_64-linux-android21-
    support_prefix=x86_64-linux-android-
    host=x86_64-linux-android
    install_dir=`pwd`/"$out_path"/x86_64
    CFLAGS="${CFLAGS} -march=x86-64 -msse4.2 -mpopcnt -m64 -mtune=intel"
  fi
  
  echo $cc_prefix
  echo $support_prefix
  echo $host
  echo $CFLAGS
  
  export AR=$TOOLCHAIN/bin/${support_prefix}ar
  export AS=$TOOLCHAIN/bin/${support_prefix}as
  export CC=$TOOLCHAIN/bin/${cc_prefix}clang
  export CXX=$TOOLCHAIN/bin/${cc_prefix}clang++
  export LD=$TOOLCHAIN/bin/${support_prefix}ld
  export RANLIB=$TOOLCHAIN/bin/${support_prefix}ranlib
  export STRIP=$TOOLCHAIN/bin/${support_prefix}strip

  ./configure --host="$host" --prefix="$install_dir"
  make clean
  make -j4
  make install

  echo "Done building $target"
done

echo "All done"
